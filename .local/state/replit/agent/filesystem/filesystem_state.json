{"file_contents":{"README.md":{"content":"This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).\n\n## Getting Started\n\nFirst, run the development server:\n\n```bash\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\n\nYou can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.\n\nThis project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.\n\n## Learn More\n\nTo learn more about Next.js, take a look at the following resources:\n\n- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.\n- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.\n\nYou can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!\n\n## Deploy on Vercel\n\nThe easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.\n\nCheck out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.\n","size_bytes":1450},"middleware.ts":{"content":"import { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server';\n\nconst isAuthenticatedRoute = createRouteMatcher([\"/dashboard(.*)\"]);\n\nexport default clerkMiddleware(async (auth, req)=>{\n    if (isAuthenticatedRoute(req)) {\n        await auth.protect();\n    }\n});\n\nexport const config = {\n    matcher: [\n        // Skip Next.js internals and all static files, unless found in search params\n        '/((?!_next|[^?]*\\\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',\n        // Always run for API routes\n        '/(api|trpc)(.*)',\n    ],\n};","size_bytes":602},"next.config.ts":{"content":"import type { NextConfig } from \"next\";\n\nconst nextConfig: NextConfig = {\n  /* config options here */\n  images:{\n    remotePatterns: [\n      {\n        protocol: \"https\",\n        hostname: 'img.clerk.com'\n      }\n    ]\n  },\n  // Configure for Replit proxy environment\n  experimental: {\n    allowedOrigins: true,\n  },\n  // Configure for production deployment compatibility\n  eslint: {\n    ignoreDuringBuilds: false,\n  },\n  typescript: {\n    ignoreBuildErrors: false,\n  },\n};\n\nexport default nextConfig;\n","size_bytes":501},"replit.md":{"content":"# Overview\n\nThis is a modern messaging platform called \"Beam\" that combines instant chat and video calling functionality. Built as a Telegram/YouTube clone, it provides seamless real-time communication with features like direct messaging, group chats, and video calls. The application focuses on delivering a clean, responsive user experience with authentication, user management, and comprehensive chat capabilities.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: Next.js 15 with App Router for modern React-based development\n- **UI Components**: Shadcn/ui component library with Radix UI primitives for consistent, accessible design\n- **Styling**: Tailwind CSS with custom CSS variables for theming and responsive design\n- **State Management**: React hooks and context for local state, Stream Chat React for chat state\n- **Authentication**: Clerk for user authentication with built-in sign-in/sign-up flows\n\n## Backend Architecture\n- **Database**: Convex for real-time database operations with automatic syncing\n- **API Layer**: Convex functions for queries and mutations, replacing traditional REST/GraphQL\n- **Server Actions**: Next.js server actions for secure server-side operations like token generation\n- **Middleware**: Clerk middleware for route protection and authentication validation\n\n## Real-time Communication\n- **Chat System**: Stream Chat SDK for messaging functionality with channels, threads, and message history\n- **Video Calling**: Stream Video SDK for high-quality video/audio calls with built-in controls\n- **Token Management**: Server-side token generation for secure Stream service authentication\n\n## Data Architecture\n- **User Management**: Convex schema with user synchronization between Clerk and Stream services\n- **Chat Channels**: Stream handles channel creation, membership, and message persistence\n- **Search**: Debounced user search with Convex queries for finding and adding chat participants\n\n## UI/UX Patterns\n- **Layout System**: Sidebar navigation with collapsible design for desktop and mobile\n- **Responsive Design**: Mobile-first approach with adaptive layouts\n- **Loading States**: Consistent spinner components and loading indicators throughout the app\n- **Error Handling**: Status cards and error boundaries for graceful failure handling\n\n# External Dependencies\n\n## Authentication & User Management\n- **Clerk**: Complete authentication solution with social logins, user profiles, and session management\n- **Integration**: Automatic user sync between Clerk and internal user database\n\n## Real-time Services\n- **Stream Chat**: Comprehensive chat infrastructure with channels, messaging, and moderation\n- **Stream Video**: Video calling platform with WebRTC, call controls, and participant management\n- **Convex**: Real-time database with automatic synchronization and optimistic updates\n\n## Development Tools\n- **Shadcn/ui**: Pre-built component library with consistent design system\n- **Lucide React**: Icon library for consistent iconography\n- **TypeScript**: Full type safety across frontend and backend\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens\n\n## Infrastructure\n- **Vercel**: Deployment platform optimized for Next.js applications\n- **Environment Variables**: Secure configuration for API keys and service endpoints\n- **Image Optimization**: Next.js image optimization with remote pattern support for user avatars","size_bytes":3493},"actions/createToken.ts":{"content":"'use server'\n\nimport { serverClient } from \"@/lib/streamServer\"\n\nexport async function createToken(userId:string) {\n    const token = serverClient.createToken(userId);\n    console.log(\"creating token for user\", userId);\n    return token;\n}","size_bytes":239},"app/globals.css":{"content":"@import \"tailwindcss\";\n@import \"tw-animate-css\";\n\n@custom-variant dark (&:is(.dark *));\n\n@theme inline {\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --font-sans: var(--font-geist-sans);\n  --font-mono: var(--font-geist-mono);\n  --color-sidebar-ring: var(--sidebar-ring);\n  --color-sidebar-border: var(--sidebar-border);\n  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);\n  --color-sidebar-accent: var(--sidebar-accent);\n  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);\n  --color-sidebar-primary: var(--sidebar-primary);\n  --color-sidebar-foreground: var(--sidebar-foreground);\n  --color-sidebar: var(--sidebar);\n  --color-chart-5: var(--chart-5);\n  --color-chart-4: var(--chart-4);\n  --color-chart-3: var(--chart-3);\n  --color-chart-2: var(--chart-2);\n  --color-chart-1: var(--chart-1);\n  --color-ring: var(--ring);\n  --color-input: var(--input);\n  --color-border: var(--border);\n  --color-destructive: var(--destructive);\n  --color-accent-foreground: var(--accent-foreground);\n  --color-accent: var(--accent);\n  --color-muted-foreground: var(--muted-foreground);\n  --color-muted: var(--muted);\n  --color-secondary-foreground: var(--secondary-foreground);\n  --color-secondary: var(--secondary);\n  --color-primary-foreground: var(--primary-foreground);\n  --color-primary: var(--primary);\n  --color-popover-foreground: var(--popover-foreground);\n  --color-popover: var(--popover);\n  --color-card-foreground: var(--card-foreground);\n  --color-card: var(--card);\n  --radius-sm: calc(var(--radius) - 4px);\n  --radius-md: calc(var(--radius) - 2px);\n  --radius-lg: var(--radius);\n  --radius-xl: calc(var(--radius) + 4px);\n}\n\n:root {\n  --radius: 0.625rem;\n  --background: oklch(1 0 0);\n  --foreground: oklch(0.145 0 0);\n  --card: oklch(1 0 0);\n  --card-foreground: oklch(0.145 0 0);\n  --popover: oklch(1 0 0);\n  --popover-foreground: oklch(0.145 0 0);\n  --primary: oklch(0.205 0 0);\n  --primary-foreground: oklch(0.985 0 0);\n  --secondary: oklch(0.97 0 0);\n  --secondary-foreground: oklch(0.205 0 0);\n  --muted: oklch(0.97 0 0);\n  --muted-foreground: oklch(0.556 0 0);\n  --accent: oklch(0.97 0 0);\n  --accent-foreground: oklch(0.205 0 0);\n  --destructive: oklch(0.577 0.245 27.325);\n  --border: oklch(0.922 0 0);\n  --input: oklch(0.922 0 0);\n  --ring: oklch(0.708 0 0);\n  --chart-1: oklch(0.646 0.222 41.116);\n  --chart-2: oklch(0.6 0.118 184.704);\n  --chart-3: oklch(0.398 0.07 227.392);\n  --chart-4: oklch(0.828 0.189 84.429);\n  --chart-5: oklch(0.769 0.188 70.08);\n  --sidebar: oklch(0.985 0 0);\n  --sidebar-foreground: oklch(0.145 0 0);\n  --sidebar-primary: oklch(0.205 0 0);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.97 0 0);\n  --sidebar-accent-foreground: oklch(0.205 0 0);\n  --sidebar-border: oklch(0.922 0 0);\n  --sidebar-ring: oklch(0.708 0 0);\n}\n\n.dark {\n  --background: oklch(0.145 0 0);\n  --foreground: oklch(0.985 0 0);\n  --card: oklch(0.205 0 0);\n  --card-foreground: oklch(0.985 0 0);\n  --popover: oklch(0.205 0 0);\n  --popover-foreground: oklch(0.985 0 0);\n  --primary: oklch(0.205 0 0);   /* almost black */\n  --primary-foreground: oklch(0.985 0 0); /* almost white */\n\n  --secondary: oklch(0.269 0 0);\n  --secondary-foreground: oklch(0.985 0 0);\n  --muted: oklch(0.269 0 0);\n  --muted-foreground: oklch(0.708 0 0);\n  --accent: oklch(0.269 0 0);\n  --accent-foreground: oklch(0.985 0 0);\n  --destructive: oklch(0.704 0.191 22.216);\n  --border: oklch(1 0 0 / 10%);\n  --input: oklch(1 0 0 / 15%);\n  --ring: oklch(0.556 0 0);\n  --chart-1: oklch(0.488 0.243 264.376);\n  --chart-2: oklch(0.696 0.17 162.48);\n  --chart-3: oklch(0.769 0.188 70.08);\n  --chart-4: oklch(0.627 0.265 303.9);\n  --chart-5: oklch(0.645 0.246 16.439);\n  --sidebar: oklch(0.205 0 0);\n  --sidebar-foreground: oklch(0.985 0 0);\n  --sidebar-primary: oklch(0.488 0.243 264.376);\n  --sidebar-primary-foreground: oklch(0.985 0 0);\n  --sidebar-accent: oklch(0.269 0 0);\n  --sidebar-accent-foreground: oklch(0.985 0 0);\n  --sidebar-border: oklch(1 0 0 / 10%);\n  --sidebar-ring: oklch(0.556 0 0);\n}\n\n@layer base {\n  * {\n    @apply border-border outline-ring/50;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n","size_bytes":4209},"app/layout.tsx":{"content":"import type { Metadata } from \"next\";\nimport { Geist, Geist_Mono } from \"next/font/google\";\nimport \"./globals.css\";\nimport { ClerkProvider } from \"@clerk/nextjs\";\nimport ConvexClientProvider from \"@/components/ConvexClientProvider\";\n\nconst geistSans = Geist({\n    variable: \"--font-geist-sans\",\n    subsets: [\"latin\"],\n});\n\nconst geistMono = Geist_Mono({\n    variable: \"--font-geist-mono\",\n    subsets: [\"latin\"],\n});\n\nexport const metadata: Metadata = {\n    title: \"Create Next App\",\n    description: \"Generated by create next app\",\n};\n\nexport default function RootLayout({\n                                       children,\n                                   }: {\n    children: React.ReactNode;\n}) {\n    return (\n        <ClerkProvider\n            signInFallbackRedirectUrl=\"/dashboard\"\n            signUpFallbackRedirectUrl=\"/dashboard\"\n        >\n             <html lang=\"en\" suppressHydrationWarning>\n                     <body className={`${geistSans.variable} ${geistMono.variable} antialiased`} suppressHydrationWarning>\n                        <ConvexClientProvider>{children}</ConvexClientProvider>\n                     </body>\n            </html>\n        </ClerkProvider>\n    );\n}\n","size_bytes":1189},"app/page.tsx":{"content":"\"use client\";\n\nimport Header from \"@/components/Header\";\nimport { SignedOut, SignInButton } from \"@clerk/nextjs\";\nimport { Button } from \"@/components/ui/button\";\n\nimport { MessageCircle, Video, Shield, Users, Zap } from \"lucide-react\";\nimport FeatureCard from \"@/components/FeatureCard\";\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen flex flex-col bg-gray-50\">\n      {/* Navbar */}\n      <Header />\n\n      {/* Hero Section */}\n      <main className=\"flex-1 flex flex-col items-center px-4 py-16 sm:px-6 text-center gap-16 relative overflow-hidden\">\n        {/* Background gradient */}\n        <div className=\"absolute inset-0 -z-10 bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-500 dark:from-blue-950/20 dark:via-indigo-950/20 dark:to-purple-950/20   rounded-3xl blur-3xl scal-150 opacity-60\"></div>\n\n        {/* Hero Content */}\n        <div className=\"max-w-4xl space-y-6 relative\">\n          <h1 className=\"text-5xl sm:text-7xl font-bold tracking-tight bg-clip-text text-transparent bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-600\">\n            Connect instantly.\n            <br />\n            <span className=\"bg-clip-text text-transparent bg-gradient-to-r from-purple-600 to-pink-600\">\n              Chat smarter.\n            </span>\n          </h1>\n\n          <p className=\"text-base sm:text-lg text-gray-600 max-w-2xl mx-auto leading-relaxed\">\n            The modern messaging platform that combines lightning-fast chat and\n            crystal-clear video calls in one seamless experience.\n          </p>\n\n          <div className=\"pt-2\">\n            <SignedOut>\n              <SignInButton mode=\"modal\">\n                <Button className=\"px-8 h-12 text-base font-medium bg-black text-white hover:bg-gray-800 rounded-md\">\n                  Start Chatting Free\n                </Button>\n              </SignInButton>\n            </SignedOut>\n          </div>\n        </div>\n\n        {/* ✅ Social Proof Section */}\n        <div className=\"pt-12 w-full max-w-4xl mx-auto\">\n          <p className=\"text-sm text-gray-500 text-center mb-6\">\n            Trusted by thousands of users worldwide\n          </p>\n\n          <div className=\"flex flex-col sm:flex-row justify-center items-center sm:gap-10 text-gray-800\">\n            {/* Stat 1 */}\n            <div className=\"text-center px-4 py-2\">\n              <div className=\"text-2xl sm:text-3xl font-bold\">50K+</div>\n              <div className=\"text-sm sm:text-base text-gray-600\">\n                Active Users\n              </div>\n            </div>\n\n            {/* Divider */}\n            <div className=\"hidden sm:block w-px h-10 bg-gray-300\"></div>\n\n            {/* Stat 2 */}\n            <div className=\"text-center px-4 py-2\">\n              <div className=\"text-2xl sm:text-3xl font-bold\">1M+</div>\n              <div className=\"text-sm sm:text-base text-gray-600\">\n                Messages Sent\n              </div>\n            </div>\n\n            {/* Divider */}\n            <div className=\"hidden sm:block w-px h-10 bg-gray-300\"></div>\n\n            {/* Stat 3 */}\n            <div className=\"text-center px-4 py-2\">\n              <div className=\"text-2xl sm:text-3xl font-bold\">99.9%</div>\n              <div className=\"text-sm sm:text-base text-gray-600\">Uptime</div>\n            </div>\n          </div>\n\n          {/* Divider with dot */}\n          <div className=\"w-full flex items-center justify-center mt-10\">\n            <div className=\"flex-1 h-px bg-gray-300\"></div>\n            <div className=\"px-3\">\n              <div className=\"w-2 h-2 rounded-full bg-gray-400\"></div>\n            </div>\n            <div className=\"flex-1 h-px bg-gray-300\"></div>\n          </div>\n        </div>\n\n        {/* Features Section */}\n        <div className=\"w-full bg-white py-14\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"text-center mb-10\">\n              <h2 className=\"text-xl sm:text-3xl font-bold mb-3 text-black\">\n                Everything you need to stay connected\n              </h2>\n              <p className=\"text-sm sm:text-base text-gray-600 max-w-2xl mx-auto\">\n                Powerful features designed for seamless communication, whether\n                you&apos;re chatting with friends or collaborating with teams.\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 justify-items-center\">\n              <FeatureCard\n                icon={MessageCircle}\n                title=\"Instant Messaging\"\n                description=\"Lightning-fast messages with real-time delivery. Chat with friends and colleagues seamlessly.\"\n              />\n              <FeatureCard\n                icon={Video}\n                title=\"HD Video Calls\"\n                description=\"Crystal-clear video calls with one click. Perfect quality for personal chats and team meetings.\"\n              />\n              <FeatureCard\n                icon={Shield}\n                title=\"Privacy First\"\n                description=\"End-to-end encryption keeps your conversations private. Your data belongs to you, always.\"\n              />\n              <FeatureCard\n                icon={Users}\n                title=\"Group Chats\"\n                description=\"Create groups with friends, family, or colleagues. Manage conversations with advanced controls.\"\n              />\n              <FeatureCard\n                icon={Zap}\n                title=\"Lightning Fast\"\n                description=\"Optimized for speed and performance. Works seamlessly across all your devices with instant sync.\"\n              />\n            </div>\n          </div>\n        </div>\n\n{/* ✅ CTA Section */}\n<div className=\"w-full flex justify-center px-4 mt-20\">\n  <div className=\"w-full max-w-2xl rounded-2xl bg-gray-100 shadow-md p-12 sm:p-14 text-center\">\n    <h2 className=\"text-2xl sm:text-3xl font-bold mb-4 text-gray-900\">\n      Ready to transform your conversations?\n    </h2>\n\n    <p className=\"text-base sm:text-lg text-gray-600 mb-8 max-w-xl mx-auto\">\n      Join thousands of users who&apos;ve already discovered a better way to communicate. \n      Start your journey with Beam today — it&apos;s completely free.\n    </p>\n\n    {/* CTA Button */}\n    <div className=\"flex justify-center mb-8\">\n      <SignedOut>\n        <SignInButton mode=\"modal\">\n          <Button className=\"px-8 h-12 text-base font-medium bg-black text-white hover:bg-gray-800 rounded-md\">\n            Get Started Free\n          </Button>\n        </SignInButton>\n      </SignedOut>\n    </div>\n\n    {/* Bullet Points with green dots */}\n    <div className=\"flex flex-col sm:flex-row justify-center items-center gap-6 text-sm text-gray-600\">\n      <div className=\"flex items-center gap-2\">\n        <span className=\"w-2 h-2 rounded-full bg-green-500 inline-block\"></span>\n        No credit card required\n      </div>\n      <div className=\"flex items-center gap-2\">\n        <span className=\"w-2 h-2 rounded-full bg-green-500\"></span>\n        Free forever plan\n      </div>\n      <div className=\"flex items-center gap-2\">\n        <span className=\"w-2 h-2 rounded-full bg-green-500\"></span>\n        Setup in 30 seconds\n      </div>\n    </div>\n  </div>\n</div>\n\n\n      </main>\n\n  <footer className=\"border-t bg-gray-100 mt-16\"> <div className=\"max-w-6xl mx-auto px-4 sm:px-6 py-12\"> <div className=\"flex flex-col sm:flex-row justify-between items-center gap-6\"> {/* Brand */} <div> <span className=\"text-lg font-bold tracking-tight text-gray-900\">Beam</span> <p className=\"text-sm text-gray-500 mt-1\"> The future of communication </p> </div> {/* Links */} <div className=\"flex items-center gap-8\"> <a href=\"#\" className=\"text-sm text-gray-500 hover:text-gray-800 transition-colors\"> Privacy Policy </a> <a href=\"#\" className=\"text-sm text-gray-500 hover:text-gray-800 transition-colors\"> Terms of Service </a> <a href=\"#\" className=\"text-sm text-gray-500 hover:text-gray-800 transition-colors\"> Support </a> </div> </div> {/* Bottom Note */} <div className=\"border-t mt-8 pt-6 text-center\"> <p className=\"text-xs text-gray-400\"> 2025 Beam. This is a Demo. We have no affiliation with any of the brands mentioned in the video including Beam, any usage is purely educational. In the event of any infringement, please contact us and we will remove/alter the content immediately. </p>  <p>❤️ Made By Prem . Gaikwad ❤️ </p> </div> </div> </footer>\n\n    </div>\n  );\n}\n","size_bytes":8426},"components/ConvexClientProvider.tsx":{"content":"'use client'\n\nimport {ConvexProviderWithClerk}   from \"convex/react-clerk\";\nimport {ConvexReactClient} from \"convex/react\";\nimport {useAuth} from \"@clerk/nextjs\";\n\nif (!process.env.NEXT_PUBLIC_CONVEX_URL){\n    throw new Error(\"Missing NEXT_PUBLIC_CONVEX_URL in your .env file\");\n}\n\nconst convex = new ConvexReactClient(process.env.NEXT_PUBLIC_CONVEX_URL);\n\nfunction ConvexClientProvider({children} : {children: React.ReactNode}) {\n    return(\n       <ConvexProviderWithClerk client={convex} useAuth={useAuth}>\n           {children}\n       </ConvexProviderWithClerk>\n    )\n}\n\nexport default ConvexClientProvider","size_bytes":610},"components/FeatureCard.tsx":{"content":"import { LucideIcon } from \"lucide-react\";\n\nfunction FeatureCard({\n  icon: Icon,\n  title,\n  description,\n}: {\n  icon: LucideIcon;\n  title: string;\n  description: string;\n}) {\n  return (\n    <div className=\"w-full max-w-sm p-6 bg-white rounded-2xl border border-gray-200 shadow-sm hover:shadow-md transition-shadow duration-300 text-center\">\n      {/* Icon container */}\n      <div className=\"w-12 h-12 flex items-center justify-center rounded-full bg-gray-100 mx-auto mb-4\">\n        <Icon className=\"w-6 h-6 text-gray-700\" />\n      </div>\n\n      {/* Title */}\n      <h3 className=\"text-base font-bold text-black mb-2\">{title}</h3>\n\n      {/* Description */}\n      <p className=\"text-sm text-gray-600\">{description}</p>\n    </div>\n  );\n}\n\nexport default FeatureCard;\n","size_bytes":766},"components/Header.tsx":{"content":"\"use client\"; \nimport Link from \"next/link\"; \nimport { usePathname } from \"next/navigation\"; \nimport { Authenticated, Unauthenticated } from \"convex/react\"; \nimport { SignInButton, UserButton } from \"@clerk/nextjs\"; \nimport { Button } from \"@/components/ui/button\"; \nfunction Header() { const pathname = usePathname(); \n      \n    const isDashboard = pathname.startsWith(\"/dashboard\"); \n    return ( \n    <header className=\"flex items-center justify-between px-4 h-16 sm:px-6\"> \n    <Link href=\"/dashboard\" className=\"font-medium uppercase tracking-widest\"> \n    Beam \n    </Link> \n    <div className=\"flex items-center gap-2\"> \n        <Authenticated> \n         {!isDashboard && (\n  <Link href=\"/dashboard\">\n    <Button variant=\"outline\" >\n    Dashboard\n    </Button>\n    \n  </Link>\n)}\n                    <UserButton />\n                     </Authenticated> \n                     <Unauthenticated> \n                        <SignInButton \n                        mode=\"modal\" \n                        forceRedirectUrl=\"/dashboard\" \n                        signUpForceRedirectUrl=\"/dashboard\" \n                        > \n                        <Button variant=\"outline\" size=\"sm\">\n                            Sign In\n                            </Button> \n                            </SignInButton> \n                            </Unauthenticated> \n                            </div> \n                            </header>\n                             );\n                             }\n                              export default Header;","size_bytes":1539},"components/LoadingSpinner.tsx":{"content":"import { cn } from \"@/lib/utils\";\n\ninterface LoadingSpinnerProps {\n  size?: \"sm\" | \"md\" | \"lg\";\n  message?: string;\n  className?: string;\n  showMessage?: boolean;\n}\n\nexport function LoadingSpinner({\n  size = \"md\",\n  message = \"Loading...\",\n  className,\n  showMessage = true,\n}: LoadingSpinnerProps) {\n  const sizeClasses = {\n    sm: \"w-4 h-4 border-2\",\n    md: \"w-6 h-6 border-2\",\n    lg: \"w-8 h-8 border-[3px]\",\n  };\n\n  const containerPadding = {\n    sm: \"min-h-[60px]\",\n    md: \"min-h-[80px]\",\n    lg: \"min-h-[100px]\",\n  };\n\n  return (\n    <div\n      className={cn(\n        \"flex flex-col items-center justify-center\",\n        containerPadding[size],\n        className\n      )}\n    >\n      <div\n        className={cn(\n          \"border-muted-foreground/20 border-t-primary rounded-full animate-spin\",\n          sizeClasses[size]\n        )}\n        role=\"status\"\n        aria-label=\"Loading\"\n      />\n      {showMessage && (\n        <p className=\"mt-3 text-sm text-muted-foreground animate-pulse\">\n          {message}\n        </p>\n      )}\n    </div>\n  );\n}\n\nexport function InlineSpinner({\n  size = \"sm\",\n  className,\n}: {\n  size?: \"sm\" | \"md\" | \"lg\";\n  className?: string;\n}) {\n  const sizeClasses = {\n    sm: \"w-4 h-4 border-2\",\n    md: \"w-5 h-5 border-2\",\n    lg: \"w-6 h-6 border-2\",\n  }; // ✅ removed the stray colon\n\n  return (\n    <div\n      className={cn(\n        \"border-muted-foreground/20 border-t-primary rounded-full animate-spin\",\n        sizeClasses[size],\n        className\n      )}\n      role=\"status\"\n      aria-label=\"Loading\"\n    />\n  );\n}\n","size_bytes":1563},"components/NewChatDialog.tsx":{"content":"'use client';\n\nimport { Doc } from \"@/convex/_generated/dataModel\";\nimport { useCreateNewChat } from \"@/hooks/useCreateNewChat\";\nimport { useUser } from \"@clerk/nextjs\";\nimport { useState } from \"react\";\nimport { useChatContext } from \"stream-chat-react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport UserSearch from \"./UserSearch\";\nimport Image from \"next/image\";\nimport { XIcon } from \"lucide-react\";\nimport { Input } from \"./ui/input\";\nimport { Button } from \"./ui/button\";\n\n\nexport function NewChatDialog({children}: {children: React.ReactNode}){\n    const [open, setOpen] = useState(false);\n    const [selectedUsers, setSelectedUsers] = useState<Doc<\"users\">[]>([]);\n    const [groupName, setGroupName] = useState(\"\");\n    const createNewChat = useCreateNewChat ();\n    const {user} = useUser();\n    const {setActiveChannel} = useChatContext();\n\n    const handleSelectUser = (user: Doc<\"users\">)=>{\n        if(!selectedUsers.find((u)=> u._id === user._id)){\n            setSelectedUsers((prev)=>[...prev, user]);\n        }\n    }\n\n    const removeUser = (userId: string) => {\n        setSelectedUsers((prev)=> prev.filter((user)=> user._id !== userId));\n    };\n\n    const handleOpenChange = (newOpen: boolean)=>{\n        setOpen(newOpen);\n        if(!newOpen){\n            setSelectedUsers([]);\n            setGroupName(\"\");\n        }\n    };\n\n    const handleCreateChat = async () =>{\n        const totalMembers = selectedUsers.length + 1;\n        const isGroupChat = totalMembers > 2;\n\n        const channel = await createNewChat({\n            members:[\n                user?.id as string,\n                ...selectedUsers.map((user) =>user.userId),\n            ],\n            createdBy: user?.id as string,\n            groupName: isGroupChat ? groupName.trim() || undefined : undefined,\n        });\n\n        setActiveChannel(channel);\n\n        setSelectedUsers([]);\n        setGroupName(\"\");\n        setOpen(false);\n    }\n\n    return (\n        <Dialog open={open}\n        onOpenChange={handleOpenChange}>\n            <DialogTrigger asChild>{children}</DialogTrigger>\n\n            <DialogContent className=\"sm:max-w-[500px] max-h-[80vh] overflow-y-auto\">\n                <DialogHeader>\n                    <DialogTitle>Start a New Chat</DialogTitle>\n                    <DialogDescription>\n                        Search for users to start a conversation with\n                    </DialogDescription>\n                </DialogHeader>\n\n                <div className=\"space-y-4\">\n                    <UserSearch onSelectUser={handleSelectUser} className=\"w-full\" />\n\n                    {selectedUsers.length > 0 && (\n                        <div className=\"space-y-3\">\n                            <h4 className=\"text-sm font-medium text-foreground\">\n                                Selected Users ({selectedUsers.length})\n                            </h4>\n                            <div className=\"space-y-2 max-h-[200px] overflow-y-auto\">\n                                {selectedUsers.map((user)=>(\n                                    <div\n                                    key={user._id}\n                                    className=\"flex items-center justify-between p-2 bg-muted/50 border border-border rounded-lg\"\n                                    >\n                                        <div className=\"flex items-center space-x-2\">\n                                            <Image \n                                            src={user.imageUrl}\n                                            alt={user.name}\n                                            width={24}\n                                            height={24}\n                                            className=\"h-6 w-6 rounded-full object-cover\" />\n\n                                            <div className=\"min-w-0 flex-1\">\n                                                <p className=\"text-sm font-medium text-foreground truncate\">\n                                                    {user.name}\n                                                </p>\n                                                <p className=\"text-xs text-muted-foreground truncate\">\n                                                    {user.email}\n                                                </p>\n                                            </div>\n                                        </div>\n                                        <button\n                                        onClick={()=>removeUser(user._id)}\n                                        className=\"text-muted-foreground hover:text-destructive transition-colors p-1\"  >\n                                            <XIcon className=\"h-4 w-4\"/>\n                                            </button>\n                                    </div>\n                                ))}\n                            </div>\n\n                            {selectedUsers.length > 1 && (\n                                <div className=\"space-y-2\">\n                                    <label \n                                    htmlFor=\"groupName\"\n                                    className=\"text-sm font-medium text-foreground\" >\n                                        Group Name (Optional)\n                                    </label>\n                                    <Input \n                                    id=\"groupName\"\n                                    type=\"text\"\n                                    placeholder=\"Enter a name for your group chat...\"\n                                    value={groupName}\n                                    onChange={(e)=> setGroupName(e.target.value)}\n                                    className=\"w-full\" />\n\n                                    <p className=\"text-xs text-muted-foreground\">\n                                        Leave empty to use default name: &quot;Group chat (\n                                            {selectedUsers.length + 1} members\n                                        )&quot;\n                                    </p>\n                                </div>\n                            )}\n                        </div>\n                    )}\n                </div>\n\n                <DialogFooter>\n                    <Button \n                    variant=\"outline\"\n                    onClick={()=> setOpen(false)} >\n                        Cancel\n                    </Button>\n                    <Button \n                    disabled={selectedUsers.length === 0}\n                    onClick={handleCreateChat} >\n                        {selectedUsers.length > 1 \n                        ? `Create Group Chat (${selectedUsers.length + 1} members)`\n                            : selectedUsers.length === 1\n                            ? \"Start Chat\"\n                        :  \"Create Chat\" }\n                    </Button>\n                </DialogFooter>\n            </DialogContent>\n        </Dialog>\n    ); \n}","size_bytes":7027},"components/StatusCard.tsx":{"content":"import React from \"react\";\n\ninterface StatusCardProps {\n    title: string;\n    description?: string;\n    action?: React.ReactNode;\n    className?: string;\n    children?: React.ReactNode;\n}\n\nexport function StatusCard({\n       title,\n    description,\n    action,\n    className,\n    children,\n}: StatusCardProps){\n    return(\n        <div\n        className={`flex items-center justify-center min-h-[400px] ${className}`}\n         >\n            <div className=\"text-center space-y-4 max-w-md w-full mx-4\">\n                {children}\n                <div className=\"text-xl font-semibold\">{title}</div>\n                {description && <div className=\"text-sm\">{description}</div>}\n                {action && <div className=\"mt-4\">{action}</div>}\n            </div>\n         </div>\n    )\n}","size_bytes":784},"components/UserSearch.tsx":{"content":"'use client';\n\nimport { Doc } from \"@/convex/_generated/dataModel\";\nimport { useUserSearch } from \"@/hooks/useUserSearch\";\nimport { cn } from \"@/lib/utils\";\nimport Image from \"next/image\";\nimport { Mail, Search, UserIcon, X } from \"lucide-react\";\nimport { Input } from \"./ui/input\";\nimport { InlineSpinner } from \"./LoadingSpinner\";\n\nfunction UserSearch({\n  onSelectUser,\n  placeholder = \"Search users by name or email...\",\n  className,\n}: {\n  onSelectUser: (user: Doc<\"users\">) => void;\n  placeholder?: string;\n  className?: string;\n}) {\n  const { searchTerm, setSearchTerm, searchResults, isLoading } = useUserSearch();\n\n  const filteredResults = searchResults;\n\n  const handleSelectUser = (user: (typeof searchResults)[0]) => {\n    onSelectUser?.(user);\n    setSearchTerm(\"\");\n  };\n\n  const clearSearch = () => {\n    setSearchTerm(\"\");\n  };\n\n  return (\n    <div className={cn(\"w-full max-w-2xl mx-auto\", className)}>\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n        <Input\n          type=\"text\"\n          placeholder={placeholder}\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          className=\"pl-10 pr-10 h-12 text-base\"\n        />\n\n        {searchTerm && (\n          <button\n            onClick={clearSearch}\n            className=\"absolute right-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground hover:text-foreground transition-colors\"\n          >\n            <X className=\"h-4 w-4\" />\n          </button>\n        )}\n      </div>\n\n      {searchTerm.trim() && (\n        <div className=\"mt-2 bg-card border border-border rounded-lg shadow-lg max-h-96 overflow-y-auto\">\n          {isLoading ? (\n            <div className=\"p-4 text-center text-muted-foreground\">\n              <div className=\"flex items-center justify-center space-x-2\">\n                <InlineSpinner size=\"sm\" />\n                <span>Searching...</span>\n              </div>\n            </div>\n          ) : filteredResults.length === 0 ? (\n            <div className=\"p-4 text-center text-muted-foreground\">\n              <UserIcon className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n              <p>No users found matching &quot;{searchTerm}&quot;</p>\n            </div>\n          ) : (\n            <div className=\"py-2\">\n              {filteredResults.map((user) => (\n                <button\n                  key={user._id}\n                  onClick={() => handleSelectUser(user)}\n                  className={cn(\n                    \"w-full px-4 py-3 text-left hover:bg-accent transition-colors\",\n                    \"border-b border-border last:border-b-0\",\n                    \"focus:outline-none focus:bg-accent\"\n                  )}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <Image\n                      src={user.imageUrl}\n                      alt={user.name}\n                      width={40}\n                      height={40}\n                      className=\"h-10 w-10 rounded-full object-cover ring-2 ring-border\"\n                    />\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"font-medium text-muted-foreground truncate\">{user.name}</p>\n                      <div className=\"flex items-center space-x-1 mt-1\">\n                        <Mail className=\"h-3 w-3 text-muted-foreground\" />\n                        <p className=\"text-sm text-muted-foreground truncate\">{user.email}</p>\n                      </div>\n                    </div>\n                  </div>\n                </button>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default UserSearch;\n\n","size_bytes":3746},"components/UserSyncWrapper.tsx":{"content":"'use client'\n\nimport { api } from \"@/convex/_generated/api\";\nimport { useUser } from \"@clerk/nextjs\";\nimport { useMutation } from \"convex/react\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { LoadingSpinner } from \"./LoadingSpinner\";\nimport streamClient from \"@/lib/stream\";\nimport { createToken } from \"@/actions/createToken\";\n\nfunction UserSyncWrapper({ children }: { children: React.ReactNode }) {\n  const { user, isLoaded: isUserLoaded } = useUser();\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const createOrUpdateUser = useMutation(api.users.upsertUser);\n\n  const syncUser = useCallback(async () => {\n    if (!user?.id) return;\n\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const tokenProvider = async () =>{\n        if(!user?.id) {\n            throw new Error(\"User is not authenticated\");\n        }\n\n        const token = await createToken(user.id);\n        return token;\n      }\n\n      await createOrUpdateUser({\n        userId: user.id,\n        name:\n          user.fullName ||\n          user.firstName ||\n          user.emailAddresses[0]?.emailAddress ||\n          \"Unknown User\",\n        email: user.emailAddresses[0]?.emailAddress || \"\",\n        imageUrl: user.imageUrl || \"\",\n      });\n\n      await streamClient.connectUser({\n        id: user.id,\n        name:\n        user.fullName ||\n        user.firstName ||\n        user.emailAddresses[0]?.emailAddress ||\n        \"Unknown User\",\n        image: user.imageUrl || \"\",\n      },\n    tokenProvider\n);\n    } catch (err) {\n      console.error(\"Failed to sync user:\", err);\n      setError(err instanceof Error ? err.message : \"An unknown error occurred\");\n    } finally {\n      setIsLoading(false);\n    }\n  }, [createOrUpdateUser, user]);\n\n  const disconnectUser = useCallback(async ()=>{\n    try {\n        await streamClient.disconnectUser();\n    } catch (err) {\n        console.error(\"Failed to disconnect user\", err);\n    }\n  }, []);\n\n  useEffect(()=>{\n     if(!isUserLoaded) return;\n\n     if(user){\n        syncUser();\n     }else{\n        disconnectUser();\n        setIsLoading(false);\n     }\n\n     return()=>{\n        if(user){\n            disconnectUser();\n        }\n     };\n  }, [user, isUserLoaded, syncUser, disconnectUser])\n\n  if (!isUserLoaded || isLoading) {\n    return (\n      <LoadingSpinner\n        size=\"lg\"\n        message={!isUserLoaded ? \"Loading...\" : \"Syncing user data...\"}\n        className=\"min-h-screen\"\n      />\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex-1 items-center justify-center bg-white px-6\">\n        <p className=\"text-red-500 text-lg font-semibold mb-2\">Sync Error</p>\n        <p className=\"text-gray-600 text-center mb-4\">{error}</p>\n        <p className=\"text-gray-500 text-sm text-center\">\n          Please try restarting the app or contact support if the issue persists.\n        </p>\n      </div>\n    );\n  }\n\n  return <>{children}</>;\n}\n\nexport default UserSyncWrapper;\n","size_bytes":3005},"components/app-sidebar.tsx":{"content":"'use client'\nimport * as React from \"react\"\n\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarHeader,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from \"@/components/ui/sidebar\"\nimport { Button } from \"./ui/button\"\nimport { UserButton, useUser } from \"@clerk/nextjs\"\nimport { ChannelList } from \"stream-chat-react\"\nimport { ChannelFilters, ChannelSort } from \"stream-chat\"\nimport { NewChatDialog } from \"./NewChatDialog\"\n\nexport function AppSidebar({ ...props }: React.ComponentProps<typeof Sidebar>) {\n  const { user } = useUser();\n\n  const filters: ChannelFilters = {\n    members: { $in: [user?.id as string] },\n    type: { $in: [\"messaging\", \"team\"] },\n  };\n  const options = { presence: true, state: true };\n  const sort: ChannelSort = {\n    last_message_at: -1,\n  };\n\n  return (\n    <Sidebar variant=\"floating\" {...props}>\n      <SidebarHeader>\n        <SidebarMenu>\n          <SidebarMenuItem>\n            <SidebarMenuButton size=\"lg\" asChild>\n              <div className=\"flex items-center justify-between w-full\">\n                <div className=\"flex flex-col\">\n                  <span className=\"text-xs text-muted-foreground\">\n                    Welcome back\n                  </span>\n                  <span className=\"text-sm font-semibold\">\n                    {user?.firstName} {user?.lastName}\n                  </span>\n                </div>\n                <UserButton signInUrl=\"/sign-in\" />\n              </div>\n            </SidebarMenuButton>\n          </SidebarMenuItem>\n        </SidebarMenu>\n      </SidebarHeader>\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarMenu className=\"gap-2\">\n            <NewChatDialog>\n            <Button className=\"w-full\" variant=\"outline\">\n              Start New Chat\n            </Button>\n            </NewChatDialog>\n            <ChannelList\n              sort={sort}\n              filters={filters}\n              options={options}\n              EmptyStateIndicator={() => (\n                <div className=\"flex flex-col items-center justify-center h-full py-12 px-4\">\n                  {/* 💬 Chat bubble with typing dots */}\n                  <div className=\"relative text-6xl mb-6 opacity-20\">\n                    💬\n                    <span className=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 flex gap-1\">\n                      <span className=\"w-2 h-2 bg-black rounded-full animate-blink\"></span>\n                      <span className=\"w-2 h-2 bg-black rounded-full animate-blink [animation-delay:0.2s]\"></span>\n                      <span className=\"w-2 h-2 bg-black rounded-full animate-blink [animation-delay:0.4s]\"></span>\n                    </span>\n                  </div>\n\n                  <h2 className=\"text-xl font-medium text-foreground mb-2\">\n                    Ready to chat?\n                  </h2>\n                  <p className=\"text-sm text-muted-foreground text-center leading-relaxed max-w-[200px]\">\n                    Your conversations will appear here once you start chatting with others.\n                  </p>\n                </div>\n              )}\n            />\n          </SidebarMenu>\n        </SidebarGroup>\n      </SidebarContent>\n    </Sidebar>\n  )\n}","size_bytes":3219},"convex/README.md":{"content":"# Welcome to your Convex functions directory!\n\nWrite your Convex functions here.\nSee https://docs.convex.dev/functions for more.\n\nA query function that takes two arguments looks like:\n\n```ts\n// convex/myFunctions.ts\nimport { query } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myQueryFunction = query({\n  // Validators for arguments.\n  args: {\n    first: v.number(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Read the database as many times as you need here.\n    // See https://docs.convex.dev/database/reading-data.\n    const documents = await ctx.db.query(\"tablename\").collect();\n\n    // Arguments passed from the client are properties of the args object.\n    console.log(args.first, args.second);\n\n    // Write arbitrary JavaScript here: filter, aggregate, build derived data,\n    // remove non-public properties, or create new objects.\n    return documents;\n  },\n});\n```\n\nUsing this query function in a React component looks like:\n\n```ts\nconst data = useQuery(api.myFunctions.myQueryFunction, {\n  first: 10,\n  second: \"hello\",\n});\n```\n\nA mutation function looks like:\n\n```ts\n// convex/myFunctions.ts\nimport { mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\n\nexport const myMutationFunction = mutation({\n  // Validators for arguments.\n  args: {\n    first: v.string(),\n    second: v.string(),\n  },\n\n  // Function implementation.\n  handler: async (ctx, args) => {\n    // Insert or modify documents in the database here.\n    // Mutations can also read from the database like queries.\n    // See https://docs.convex.dev/database/writing-data.\n    const message = { body: args.first, author: args.second };\n    const id = await ctx.db.insert(\"messages\", message);\n\n    // Optionally, return a value from your mutation.\n    return await ctx.db.get(id);\n  },\n});\n```\n\nUsing this mutation function in a React component looks like:\n\n```ts\nconst mutation = useMutation(api.myFunctions.myMutationFunction);\nfunction handleButtonPress() {\n  // fire and forget, the most common way to use mutations\n  mutation({ first: \"Hello!\", second: \"me\" });\n  // OR\n  // use the result once the mutation has completed\n  mutation({ first: \"Hello!\", second: \"me\" }).then((result) =>\n    console.log(result),\n  );\n}\n```\n\nUse the Convex CLI to push your functions to a deployment. See everything\nthe Convex CLI can do by running `npx convex -h` in your project root\ndirectory. To learn more, launch the docs with `npx convex docs`.\n","size_bytes":2524},"convex/auth.config.ts":{"content":"export default {\n  providers: [\n    {\n      domain: process.env.CLERK_JWT_ISSUER_DOMAIN,\n      applicationID: \"convex\",\n    },\n  ]\n};\n","size_bytes":134},"convex/schema.ts":{"content":"import { defineSchema, defineTable } from \"convex/server\";\nimport { v } from \"convex/values\";\n\nexport default defineSchema({\n  users: defineTable({\n    userId: v.string(),\n    name: v.string(),\n    email: v.string(),\n    imageUrl: v.string(),\n  }).index(\"by_userId\", [\"userId\"]),\n});","size_bytes":283},"convex/users.ts":{"content":"import { query, mutation } from \"./_generated/server\";\nimport { v } from \"convex/values\";\nimport { Id } from \"./_generated/dataModel\";\nimport type { QueryCtx, MutationCtx } from \"./_generated/server\";\n\n// Get user by Clerk userId\nexport const getUserByClerkUserId = query({\n  args: { userId: v.string() },\n  handler: async (ctx: QueryCtx, { userId }: { userId: string }) => {\n    if (!userId) return null;\n\n    return await ctx.db\n      .query(\"users\")\n      .withIndex(\"by_userId\", (q) => q.eq(\"userId\", userId)) // ✅ no any\n      .first();\n  },\n});\n\n// Insert or update user\nexport const upsertUser = mutation({\n  args: {\n    userId: v.string(),\n    name: v.string(),\n    email: v.string(),\n    imageUrl: v.string(),\n  },\n  handler: async (\n    ctx: MutationCtx,\n    { userId, name, email, imageUrl }: { userId: string; name: string; email: string; imageUrl: string }\n  ) => {\n    const existingUser = await ctx.db\n      .query(\"users\")\n      .withIndex(\"by_userId\", (q) => q.eq(\"userId\", userId)) // ✅ no any\n      .first();\n\n    if (existingUser) {\n      await ctx.db.patch(existingUser._id as Id<\"users\">, { name, imageUrl });\n      return existingUser._id;\n    }\n\n    return await ctx.db.insert(\"users\", { userId, name, email, imageUrl });\n  },\n});\n\n// Search users by name or email\nexport const searchUsers = query({\n  args: { searchTerm: v.string() },\n  handler: async (ctx: QueryCtx, { searchTerm }: { searchTerm: string }) => {\n    if (!searchTerm.trim()) return [];\n\n    const normalizedSearch = searchTerm.toLowerCase().trim();\n    const allUsers = await ctx.db.query(\"users\").collect();\n\n    return allUsers\n      .filter(\n        (user) =>\n          user.name.toLowerCase().includes(normalizedSearch) ||\n          user.email.toLowerCase().includes(normalizedSearch)\n      )\n      .slice(0, 20);\n  },\n});\n","size_bytes":1822},"hooks/use-mobile.ts":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"hooks/useCreateNewChat.ts":{"content":"import streamClient from \"@/lib/stream\";\n\nexport const useCreateNewChat = () => {\n    const createNewChat = async ({\n        members,\n        createdBy,\n        groupName,\n    }:{\n        members: string[];\n        createdBy: string;\n        groupName?: string;\n    })=>{\n        const isGroupChat = members.length > 2;\n\n        if(!isGroupChat){\n            const existingChannel = await streamClient.queryChannels(\n                {\n                    type: \"messaging\",\n                    members: {$eq: members},\n                },\n                {created_at: -1},\n                {limit: 1}\n            )\n\n            if (existingChannel.length > 0) {\n                const channel = existingChannel[0];\n                const channelMembers = Object.keys(channel.state.members);\n\n                if(\n                    channelMembers.length === 2 &&\n                    members.length === 2 &&\n                    members.every((member) => channelMembers.includes(member))\n                ){\n                    console.log(\"Existing 1-1 chat found\");\n                    return channel;\n                }\n            }\n        }\n\n        const channelId = `${Date.now()}-${Math.random().toString(36).substring(2, 15)}`;\n        try{\n            const channelData:{\n                members: string[];\n                created_by_id: string;\n                name?: string;\n            }={\n                members,\n                created_by_id: createdBy,\n            };\n\n            if(isGroupChat){\n                channelData.name=\n                groupName || `Group chat(${members.length} members)`\n            }\n\n            const channel = streamClient.channel(\n                isGroupChat ? \"team\" : \"messaging\",\n                channelId,\n                channelData\n            );\n\n            await channel.watch({\n                presence: true,\n            });\n\n            return channel;\n        }catch(error){\n           throw error;\n        }\n    }\n\n    return createNewChat;\n}","size_bytes":2001},"hooks/useDebounce.ts":{"content":"import {useState, useEffect} from 'react';\n\nexport function useDebounce<T>(value: T, delay: number): T{\n    const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n    useEffect(()=>{\n        const handler = setTimeout(()=>{\n            setDebouncedValue(value);\n        }, delay);\n\n        return()=>{\n            clearTimeout(handler);\n        };\n    }, [value, delay]);\n\n    return debouncedValue;\n}","size_bytes":411},"hooks/useUserSearch.ts":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"convex/react\";\nimport { api } from \"@/convex/_generated/api\";\nimport { Doc } from \"@/convex/_generated/dataModel\";\nimport { useDebounce } from \"./useDebounce\";\n\nexport function useUserSearch(){\n    const [searchTerm, setSearchTerm] = useState(\"\");\n    const debouncedSearchTerm = useDebounce(searchTerm, 300);\n\n    const searchResults = useQuery(\n        api.users.searchUsers,\n        debouncedSearchTerm.trim()?{searchTerm: debouncedSearchTerm}:\"skip\"\n    );\n\n    return{\n        searchTerm,\n        setSearchTerm,\n        searchResults: (searchResults || []) as Doc<\"users\">[],\n        isLoading: searchResults === undefined && debouncedSearchTerm.trim() !== \"\",\n    }\n}","size_bytes":733},"lib/stream.ts":{"content":"import {StreamChat} from \"stream-chat\"\n\nif (!process.env.NEXT_PUBLIC_STREAM_API_KEY){\n    throw new Error (\"NEXT_PUBLIC_STREAM_API_KEY is not set\");\n}\n\nconst streamClient = StreamChat.getInstance(\n    process.env.NEXT_PUBLIC_STREAM_API_KEY\n);\n\nexport default streamClient;","size_bytes":272},"lib/streamServer.ts":{"content":"import {StreamChat} from \"stream-chat\"\n\nif (!process.env.NEXT_PUBLIC_STREAM_API_KEY){\n    throw new Error (\"NEXT_PUBLIC_STREAM_API_KEY is not set\");\n}\n\nif(!process.env.STREAM_API_SECRET_KEY){\n    throw new Error (\"STREAM_API_SECRET_KEY is not set\");\n}\n\nexport const serverClient = StreamChat.getInstance(\n    process.env.NEXT_PUBLIC_STREAM_API_KEY,\n    process.env.STREAM_API_SECRET_KEY\n)","size_bytes":388},"lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"app/(signed-in)/layout.tsx":{"content":"'use client'\nimport {Chat} from \"stream-chat-react\";\n\nimport UserSyncWrapper from \"@/components/UserSyncWrapper\";\nimport streamClient from \"@/lib/stream\";\nimport { SidebarInset, SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport { Separator } from \"@radix-ui/react-separator\";\nimport Link from \"next/link\";\nimport \"stream-chat-react/dist/css/v2/index.css\";\n\n\n\nfunction Layout({children}:{children: React.ReactNode}) {\n    return(\n    <UserSyncWrapper>\n        <Chat client={streamClient}> \n             <SidebarProvider\n      style={\n        {\n          \"--sidebar-width\": \"19rem\",\n        } as React.CSSProperties\n      }\n    >\n      <AppSidebar />\n      <SidebarInset>\n        <header className=\"flex h-16 shrink-0 items-center gap-2 px-4\">\n          <SidebarTrigger className=\"-ml-1\" />\n          <Separator\n            orientation=\"vertical\"\n            className=\"mr-2 data-[orientation=vertical]:h-4\"\n          />\n\n          <Link href=\"/dashboard\">\n          <h1 className=\"text-lg font-bold tracking-wider uppercase\">\n            Beam\n          </h1>\n          </Link>\n      \n        </header>\n        <div className=\"flex flex-1 flex-col gap-4 p-4 pt-0\">\n            {children}\n        </div>\n      </SidebarInset>\n    </SidebarProvider>\n        </Chat>\n        </UserSyncWrapper>\n    );\n}\n\nexport default Layout;\n","size_bytes":1400},"components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Breadcrumb({ ...props }: React.ComponentProps<\"nav\">) {\n  return <nav aria-label=\"breadcrumb\" data-slot=\"breadcrumb\" {...props} />\n}\n\nfunction BreadcrumbList({ className, ...props }: React.ComponentProps<\"ol\">) {\n  return (\n    <ol\n      data-slot=\"breadcrumb-list\"\n      className={cn(\n        \"text-muted-foreground flex flex-wrap items-center gap-1.5 text-sm break-words sm:gap-2.5\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"breadcrumb-item\"\n      className={cn(\"inline-flex items-center gap-1.5\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbLink({\n  asChild,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"breadcrumb-link\"\n      className={cn(\"hover:text-foreground transition-colors\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbPage({ className, ...props }: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"breadcrumb-page\"\n      role=\"link\"\n      aria-disabled=\"true\"\n      aria-current=\"page\"\n      className={cn(\"text-foreground font-normal\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction BreadcrumbSeparator({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"breadcrumb-separator\"\n      role=\"presentation\"\n      aria-hidden=\"true\"\n      className={cn(\"[&>svg]:size-3.5\", className)}\n      {...props}\n    >\n      {children ?? <ChevronRight />}\n    </li>\n  )\n}\n\nfunction BreadcrumbEllipsis({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"breadcrumb-ellipsis\"\n      role=\"presentation\"\n      aria-hidden=\"true\"\n      className={cn(\"flex size-9 items-center justify-center\", className)}\n      {...props}\n    >\n      <MoreHorizontal className=\"size-4\" />\n      <span className=\"sr-only\">More</span>\n    </span>\n  )\n}\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2357},"components/ui/button.tsx":{"content":"// components/ui/button.tsx\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:ring-2 focus-visible:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow hover:bg-destructive/90\",\n        outline:\n          \"border bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n\n        // ✅ Black CTA button\n        cta: \"bg-black text-white font-semibold px-6 py-3 rounded-lg hover:bg-neutral-800 active:scale-95 transition-transform shadow-md\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md gap-1.5 px-3\",\n        lg: \"h-11 px-8 text-base rounded-md\",\n        xl: \"h-14 px-10 text-lg rounded-lg\", // Hero-style big button\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n);\n\nexport interface ButtonProps\n    extends React.ComponentPropsWithoutRef<\"button\">,\n        VariantProps<typeof buttonVariants> {\n    asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n    ({ className, variant, size, asChild = false, ...props }, ref) => {\n        const Comp = asChild ? Slot : \"button\"\n        return (\n            <Comp\n                ref={ref}\n                className={cn(buttonVariants({ variant, size }), className)}\n                {...props}\n            />\n        )\n    }\n)\n\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2225},"components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { XIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Dialog({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />\n}\n\nfunction DialogTrigger({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />\n}\n\nfunction DialogPortal({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />\n}\n\nfunction DialogClose({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />\n}\n\nfunction DialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogContent({\n  className,\n  children,\n  showCloseButton = true,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content> & {\n  showCloseButton?: boolean\n}) {\n  return (\n    <DialogPortal data-slot=\"dialog-portal\">\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        {showCloseButton && (\n          <DialogPrimitive.Close\n            data-slot=\"dialog-close\"\n            className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\"\n          >\n            <XIcon />\n            <span className=\"sr-only\">Close</span>\n          </DialogPrimitive.Close>\n        )}\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  )\n}\n\nfunction DialogHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-header\"\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn(\"text-lg leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n}\n","size_bytes":3982},"components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        \"file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n        \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Input }\n","size_bytes":967},"components/ui/separator.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Separator({\n  className,\n  orientation = \"horizontal\",\n  decorative = true,\n  ...props\n}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {\n  return (\n    <SeparatorPrimitive.Root\n      data-slot=\"separator\"\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Separator }\n","size_bytes":699},"components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { XIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {\n  return <SheetPrimitive.Root data-slot=\"sheet\" {...props} />\n}\n\nfunction SheetTrigger({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {\n  return <SheetPrimitive.Trigger data-slot=\"sheet-trigger\" {...props} />\n}\n\nfunction SheetClose({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Close>) {\n  return <SheetPrimitive.Close data-slot=\"sheet-close\" {...props} />\n}\n\nfunction SheetPortal({\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Portal>) {\n  return <SheetPrimitive.Portal data-slot=\"sheet-portal\" {...props} />\n}\n\nfunction SheetOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {\n  return (\n    <SheetPrimitive.Overlay\n      data-slot=\"sheet-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SheetContent({\n  className,\n  children,\n  side = \"right\",\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Content> & {\n  side?: \"top\" | \"right\" | \"bottom\" | \"left\"\n}) {\n  return (\n    <SheetPortal>\n      <SheetOverlay />\n      <SheetPrimitive.Content\n        data-slot=\"sheet-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n          side === \"right\" &&\n            \"data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm\",\n          side === \"left\" &&\n            \"data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm\",\n          side === \"top\" &&\n            \"data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b\",\n          side === \"bottom\" &&\n            \"data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <SheetPrimitive.Close className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none\">\n          <XIcon className=\"size-4\" />\n          <span className=\"sr-only\">Close</span>\n        </SheetPrimitive.Close>\n      </SheetPrimitive.Content>\n    </SheetPortal>\n  )\n}\n\nfunction SheetHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sheet-header\"\n      className={cn(\"flex flex-col gap-1.5 p-4\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SheetFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sheet-footer\"\n      className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SheetTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Title>) {\n  return (\n    <SheetPrimitive.Title\n      data-slot=\"sheet-title\"\n      className={cn(\"text-foreground font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SheetDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof SheetPrimitive.Description>) {\n  return (\n    <SheetPrimitive.Description\n      data-slot=\"sheet-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sheet,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4090},"components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-(--sidebar-width) flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-(--sidebar-width) p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-(--sidebar-width) bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4)))]\"\n            : \"group-data-[collapsible=icon]:w-(--sidebar-width-icon)\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-(--sidebar-width) transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4))+2px)]\"\n            : \"group-data-[collapsible=icon]:w-(--sidebar-width-icon) group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"size-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-(--skeleton-width) flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-hidden focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21633},"components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"skeleton\"\n      className={cn(\"bg-accent animate-pulse rounded-md\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":276},"components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction TooltipProvider({\n  delayDuration = 0,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {\n  return (\n    <TooltipPrimitive.Provider\n      data-slot=\"tooltip-provider\"\n      delayDuration={delayDuration}\n      {...props}\n    />\n  )\n}\n\nfunction Tooltip({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Root>) {\n  return (\n    <TooltipProvider>\n      <TooltipPrimitive.Root data-slot=\"tooltip\" {...props} />\n    </TooltipProvider>\n  )\n}\n\nfunction TooltipTrigger({\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {\n  return <TooltipPrimitive.Trigger data-slot=\"tooltip-trigger\" {...props} />\n}\n\nfunction TooltipContent({\n  className,\n  sideOffset = 0,\n  children,\n  ...props\n}: React.ComponentProps<typeof TooltipPrimitive.Content>) {\n  return (\n    <TooltipPrimitive.Portal>\n      <TooltipPrimitive.Content\n        data-slot=\"tooltip-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md px-3 py-1.5 text-xs text-balance\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <TooltipPrimitive.Arrow className=\"bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]\" />\n      </TooltipPrimitive.Content>\n    </TooltipPrimitive.Portal>\n  )\n}\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1891},"convex/_generated/api.d.ts":{"content":"/* eslint-disable */\n/**\n * Generated `api` utility.\n *\n * THIS CODE IS AUTOMATICALLY GENERATED.\n *\n * To regenerate, run `npx convex dev`.\n * @module\n */\n\nimport type {\n  ApiFromModules,\n  FilterApi,\n  FunctionReference,\n} from \"convex/server\";\nimport type * as users from \"../users.js\";\n\n/**\n * A utility for referencing Convex functions in your app's API.\n *\n * Usage:\n * ```js\n * const myFunctionReference = api.myModule.myFunction;\n * ```\n */\ndeclare const fullApi: ApiFromModules<{\n  users: typeof users;\n}>;\nexport declare const api: FilterApi<\n  typeof fullApi,\n  FunctionReference<any, \"public\">\n>;\nexport declare const internal: FilterApi<\n  typeof fullApi,\n  FunctionReference<any, \"internal\">\n>;\n","size_bytes":708},"convex/_generated/api.js":{"content":"/* eslint-disable */\n/**\n * Generated `api` utility.\n *\n * THIS CODE IS AUTOMATICALLY GENERATED.\n *\n * To regenerate, run `npx convex dev`.\n * @module\n */\n\nimport { anyApi } from \"convex/server\";\n\n/**\n * A utility for referencing Convex functions in your app's API.\n *\n * Usage:\n * ```js\n * const myFunctionReference = api.myModule.myFunction;\n * ```\n */\nexport const api = anyApi;\nexport const internal = anyApi;\n","size_bytes":414},"convex/_generated/dataModel.d.ts":{"content":"/* eslint-disable */\n/**\n * Generated data model types.\n *\n * THIS CODE IS AUTOMATICALLY GENERATED.\n *\n * To regenerate, run `npx convex dev`.\n * @module\n */\n\nimport type {\n  DataModelFromSchemaDefinition,\n  DocumentByName,\n  TableNamesInDataModel,\n  SystemTableNames,\n} from \"convex/server\";\nimport type { GenericId } from \"convex/values\";\nimport schema from \"../schema.js\";\n\n/**\n * The names of all of your Convex tables.\n */\nexport type TableNames = TableNamesInDataModel<DataModel>;\n\n/**\n * The type of a document stored in Convex.\n *\n * @typeParam TableName - A string literal type of the table name (like \"users\").\n */\nexport type Doc<TableName extends TableNames> = DocumentByName<\n  DataModel,\n  TableName\n>;\n\n/**\n * An identifier for a document in Convex.\n *\n * Convex documents are uniquely identified by their `Id`, which is accessible\n * on the `_id` field. To learn more, see [Document IDs](https://docs.convex.dev/using/document-ids).\n *\n * Documents can be loaded using `db.get(id)` in query and mutation functions.\n *\n * IDs are just strings at runtime, but this type can be used to distinguish them from other\n * strings when type checking.\n *\n * @typeParam TableName - A string literal type of the table name (like \"users\").\n */\nexport type Id<TableName extends TableNames | SystemTableNames> =\n  GenericId<TableName>;\n\n/**\n * A type describing your Convex data model.\n *\n * This type includes information about what tables you have, the type of\n * documents stored in those tables, and the indexes defined on them.\n *\n * This type is used to parameterize methods like `queryGeneric` and\n * `mutationGeneric` to make them type-safe.\n */\nexport type DataModel = DataModelFromSchemaDefinition<typeof schema>;\n","size_bytes":1725},"convex/_generated/server.d.ts":{"content":"/* eslint-disable */\n/**\n * Generated utilities for implementing server-side Convex query and mutation functions.\n *\n * THIS CODE IS AUTOMATICALLY GENERATED.\n *\n * To regenerate, run `npx convex dev`.\n * @module\n */\n\nimport {\n  ActionBuilder,\n  HttpActionBuilder,\n  MutationBuilder,\n  QueryBuilder,\n  GenericActionCtx,\n  GenericMutationCtx,\n  GenericQueryCtx,\n  GenericDatabaseReader,\n  GenericDatabaseWriter,\n} from \"convex/server\";\nimport type { DataModel } from \"./dataModel.js\";\n\n/**\n * Define a query in this Convex app's public API.\n *\n * This function will be allowed to read your Convex database and will be accessible from the client.\n *\n * @param func - The query function. It receives a {@link QueryCtx} as its first argument.\n * @returns The wrapped query. Include this as an `export` to name it and make it accessible.\n */\nexport declare const query: QueryBuilder<DataModel, \"public\">;\n\n/**\n * Define a query that is only accessible from other Convex functions (but not from the client).\n *\n * This function will be allowed to read from your Convex database. It will not be accessible from the client.\n *\n * @param func - The query function. It receives a {@link QueryCtx} as its first argument.\n * @returns The wrapped query. Include this as an `export` to name it and make it accessible.\n */\nexport declare const internalQuery: QueryBuilder<DataModel, \"internal\">;\n\n/**\n * Define a mutation in this Convex app's public API.\n *\n * This function will be allowed to modify your Convex database and will be accessible from the client.\n *\n * @param func - The mutation function. It receives a {@link MutationCtx} as its first argument.\n * @returns The wrapped mutation. Include this as an `export` to name it and make it accessible.\n */\nexport declare const mutation: MutationBuilder<DataModel, \"public\">;\n\n/**\n * Define a mutation that is only accessible from other Convex functions (but not from the client).\n *\n * This function will be allowed to modify your Convex database. It will not be accessible from the client.\n *\n * @param func - The mutation function. It receives a {@link MutationCtx} as its first argument.\n * @returns The wrapped mutation. Include this as an `export` to name it and make it accessible.\n */\nexport declare const internalMutation: MutationBuilder<DataModel, \"internal\">;\n\n/**\n * Define an action in this Convex app's public API.\n *\n * An action is a function which can execute any JavaScript code, including non-deterministic\n * code and code with side-effects, like calling third-party services.\n * They can be run in Convex's JavaScript environment or in Node.js using the \"use node\" directive.\n * They can interact with the database indirectly by calling queries and mutations using the {@link ActionCtx}.\n *\n * @param func - The action. It receives an {@link ActionCtx} as its first argument.\n * @returns The wrapped action. Include this as an `export` to name it and make it accessible.\n */\nexport declare const action: ActionBuilder<DataModel, \"public\">;\n\n/**\n * Define an action that is only accessible from other Convex functions (but not from the client).\n *\n * @param func - The function. It receives an {@link ActionCtx} as its first argument.\n * @returns The wrapped function. Include this as an `export` to name it and make it accessible.\n */\nexport declare const internalAction: ActionBuilder<DataModel, \"internal\">;\n\n/**\n * Define an HTTP action.\n *\n * This function will be used to respond to HTTP requests received by a Convex\n * deployment if the requests matches the path and method where this action\n * is routed. Be sure to route your action in `convex/http.js`.\n *\n * @param func - The function. It receives an {@link ActionCtx} as its first argument.\n * @returns The wrapped function. Import this function from `convex/http.js` and route it to hook it up.\n */\nexport declare const httpAction: HttpActionBuilder;\n\n/**\n * A set of services for use within Convex query functions.\n *\n * The query context is passed as the first argument to any Convex query\n * function run on the server.\n *\n * This differs from the {@link MutationCtx} because all of the services are\n * read-only.\n */\nexport type QueryCtx = GenericQueryCtx<DataModel>;\n\n/**\n * A set of services for use within Convex mutation functions.\n *\n * The mutation context is passed as the first argument to any Convex mutation\n * function run on the server.\n */\nexport type MutationCtx = GenericMutationCtx<DataModel>;\n\n/**\n * A set of services for use within Convex action functions.\n *\n * The action context is passed as the first argument to any Convex action\n * function run on the server.\n */\nexport type ActionCtx = GenericActionCtx<DataModel>;\n\n/**\n * An interface to read from the database within Convex query functions.\n *\n * The two entry points are {@link DatabaseReader.get}, which fetches a single\n * document by its {@link Id}, or {@link DatabaseReader.query}, which starts\n * building a query.\n */\nexport type DatabaseReader = GenericDatabaseReader<DataModel>;\n\n/**\n * An interface to read from and write to the database within Convex mutation\n * functions.\n *\n * Convex guarantees that all writes within a single mutation are\n * executed atomically, so you never have to worry about partial writes leaving\n * your data in an inconsistent state. See [the Convex Guide](https://docs.convex.dev/understanding/convex-fundamentals/functions#atomicity-and-optimistic-concurrency-control)\n * for the guarantees Convex provides your functions.\n */\nexport type DatabaseWriter = GenericDatabaseWriter<DataModel>;\n","size_bytes":5539},"convex/_generated/server.js":{"content":"/* eslint-disable */\n/**\n * Generated utilities for implementing server-side Convex query and mutation functions.\n *\n * THIS CODE IS AUTOMATICALLY GENERATED.\n *\n * To regenerate, run `npx convex dev`.\n * @module\n */\n\nimport {\n  actionGeneric,\n  httpActionGeneric,\n  queryGeneric,\n  mutationGeneric,\n  internalActionGeneric,\n  internalMutationGeneric,\n  internalQueryGeneric,\n} from \"convex/server\";\n\n/**\n * Define a query in this Convex app's public API.\n *\n * This function will be allowed to read your Convex database and will be accessible from the client.\n *\n * @param func - The query function. It receives a {@link QueryCtx} as its first argument.\n * @returns The wrapped query. Include this as an `export` to name it and make it accessible.\n */\nexport const query = queryGeneric;\n\n/**\n * Define a query that is only accessible from other Convex functions (but not from the client).\n *\n * This function will be allowed to read from your Convex database. It will not be accessible from the client.\n *\n * @param func - The query function. It receives a {@link QueryCtx} as its first argument.\n * @returns The wrapped query. Include this as an `export` to name it and make it accessible.\n */\nexport const internalQuery = internalQueryGeneric;\n\n/**\n * Define a mutation in this Convex app's public API.\n *\n * This function will be allowed to modify your Convex database and will be accessible from the client.\n *\n * @param func - The mutation function. It receives a {@link MutationCtx} as its first argument.\n * @returns The wrapped mutation. Include this as an `export` to name it and make it accessible.\n */\nexport const mutation = mutationGeneric;\n\n/**\n * Define a mutation that is only accessible from other Convex functions (but not from the client).\n *\n * This function will be allowed to modify your Convex database. It will not be accessible from the client.\n *\n * @param func - The mutation function. It receives a {@link MutationCtx} as its first argument.\n * @returns The wrapped mutation. Include this as an `export` to name it and make it accessible.\n */\nexport const internalMutation = internalMutationGeneric;\n\n/**\n * Define an action in this Convex app's public API.\n *\n * An action is a function which can execute any JavaScript code, including non-deterministic\n * code and code with side-effects, like calling third-party services.\n * They can be run in Convex's JavaScript environment or in Node.js using the \"use node\" directive.\n * They can interact with the database indirectly by calling queries and mutations using the {@link ActionCtx}.\n *\n * @param func - The action. It receives an {@link ActionCtx} as its first argument.\n * @returns The wrapped action. Include this as an `export` to name it and make it accessible.\n */\nexport const action = actionGeneric;\n\n/**\n * Define an action that is only accessible from other Convex functions (but not from the client).\n *\n * @param func - The function. It receives an {@link ActionCtx} as its first argument.\n * @returns The wrapped function. Include this as an `export` to name it and make it accessible.\n */\nexport const internalAction = internalActionGeneric;\n\n/**\n * Define a Convex HTTP action.\n *\n * @param func - The function. It receives an {@link ActionCtx} as its first argument, and a `Request` object\n * as its second.\n * @returns The wrapped endpoint function. Route a URL path to this function in `convex/http.js`.\n */\nexport const httpAction = httpActionGeneric;\n","size_bytes":3453},"app/(signed-in)/dashboard/page.tsx":{"content":"'use client';\n\nimport { Button } from \"@/components/ui/button\";\nimport { useSidebar } from \"@/components/ui/sidebar\";\nimport { LogOutIcon, VideoIcon } from \"lucide-react\";\nimport { useRouter } from \"next/navigation\"; \nimport {\n  Channel,\n  Window,\n  Thread,\n  useChatContext,\n  ChannelHeader,\n  MessageList,\n  MessageInput,\n} from \"stream-chat-react\";\n\nfunction Dashboard() {\n  // ⚡️ Removed unused `user` to fix ESLint warning\n  const router = useRouter();\n  const { channel, setActiveChannel } = useChatContext();\n  const { setOpen } = useSidebar();\n\n  const handleCall = () => {\n    if (!channel) return;\n    router.push(`/dashboard/video-call/${channel.id}`);\n    setOpen(false);\n  };\n\n  const handleLeaveChat = async () => {\n    if (!channel) return;\n\n    const confirmLeave = window.confirm(\"Are you sure you want to leave the chat?\");\n    if (!confirmLeave) return;\n\n    try {\n      // In real app, also remove current userId from channel\n      await channel.removeMembers([]);\n\n      setActiveChannel(undefined);\n\n      router.push(\"/dashboard\");\n    } catch (error) {\n      console.error(\"Error leaving chat\", error);\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col w-full flex-1\">\n      {channel ? (\n        <Channel>\n          <Window>\n            <div className=\"flex items-center justify-between\">\n              {channel.data?.member_count === 1 ? (\n                <ChannelHeader title=\"Everyone else has left this chat!\" />\n              ) : (\n                <ChannelHeader />\n              )}\n\n              <div className=\"flex items-center gap-2\">\n                <Button variant=\"outline\" onClick={handleCall}>\n                  <VideoIcon className=\"w-4 h-4\" />\n                  Video Call\n                </Button>\n\n                <Button\n                  variant=\"outline\"\n                  onClick={handleLeaveChat}\n                  className=\"text-red-500 hover:text-red-600 hover:bg-red-50 dark:hover:bg-red-950\"\n                >\n                  <LogOutIcon className=\"w-4 h-4\" />\n                  Leave Chat\n                </Button>\n              </div>\n            </div>\n\n            <MessageList />\n\n            <div className=\"sticky bottom-0 w-full\">\n              <MessageInput />\n            </div>\n          </Window>\n          <Thread />\n        </Channel>\n      ) : (\n        <div className=\"flex flex-col items-center justify-center h-full\">\n          <h2 className=\"text-2xl font-semibold text-muted-foreground mb-4\">\n            No chat selected\n          </h2>\n          <p className=\"text-muted-foreground\">\n            Select a chat from the sidebar or start a new conversation\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Dashboard;\n","size_bytes":2727},"app/(signed-in)/dashboard/video-call/[id]/layout.tsx":{"content":"'use client';\n\nimport { createToken } from '@/actions/createToken';\nimport { InlineSpinner } from '@/components/LoadingSpinner';\nimport { StatusCard } from '@/components/StatusCard';\nimport { useUser } from '@clerk/nextjs';\nimport {\n  Call,\n  CallingState,\n  StreamCall,\n  StreamTheme,\n  StreamVideo,\n  StreamVideoClient,\n} from '@stream-io/video-react-sdk';\nimport { AlertTriangle, Video } from 'lucide-react';\nimport { useParams } from 'next/navigation';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport \"@stream-io/video-react-sdk/dist/css/styles.css\";\n\nif (!process.env.NEXT_PUBLIC_STREAM_API_KEY) {\n  throw new Error('NEXT_PUBLIC_STREAM_API_KEY is not set');\n}\n\nfunction Layout({ children }: { children: React.ReactNode }) {\n  const { user } = useUser(); // ✅ must call hook\n  const { id } = useParams(); // ✅ must call hook\n  const [call, setCall] = useState<Call | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [client, setClient] = useState<StreamVideoClient | null>(null);\n\n  const streamUser = useMemo(() => {\n    if (!user?.id) return null;\n\n    return {\n      id: user.id,\n      name:\n        user.fullName ||\n        user.emailAddresses[0]?.emailAddress ||\n        'Unknown User',\n      image: user.imageUrl || '',\n      type: 'authenticated' as const,\n    };\n  }, [user]);\n\n  const tokenProvider = useCallback(async () => {\n    if (!user?.id) {\n      throw new Error('User not authenticated');\n    }\n    return await createToken(user.id);\n  }, [user?.id]);\n\n  useEffect(() => {\n    if (!streamUser) {\n      setClient(null);\n      return;\n    }\n\n    const newClient = new StreamVideoClient({\n      apiKey: process.env.NEXT_PUBLIC_STREAM_API_KEY as string,\n      user: streamUser,\n      tokenProvider,\n    });\n\n    setClient(newClient);\n\n    return () => {\n      newClient.disconnectUser().catch(console.error);\n    };\n  }, [streamUser, tokenProvider]);\n\n  useEffect(() => {\n    if (!client || !id) return;\n\n    setError(null);\n    const callInstance = client.call('default', id as string); // ✅ renamed\n\n    const joinCall = async () => {\n      try {\n        await callInstance.join({ create: true });\n        setCall(callInstance);\n      } catch (error) {\n        console.error('Failed to join call:', error);\n        setError(\n          error instanceof Error ? error.message : 'Failed to join call'\n        );\n      }\n    };\n\n    joinCall();\n\n    return () => {\n      if (\n        callInstance &&\n        callInstance.state.callingState === CallingState.JOINED\n      ) {\n        callInstance.leave().catch(console.error);\n      }\n    };\n  }, [id, client]);\n\n  if(error){\n    return(\n    <StatusCard\n    title='Call Error'\n    description={error}\n    className='min-h-screen bg-red-50'\n    action={\n        <button\n        onClick={()=> window.location.reload()}\n        className='w-full bg-red-600 hover:bg-red-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2' >\n            Retry\n        </button>\n    } \n    >\n        <div className='w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto'>\n            <AlertTriangle className='w-8 h-8 text-red-600' />\n        </div>\n\n    </StatusCard>\n    );\n  };\n\n  if (!client) {\n    return (\n        <StatusCard\n        title='Initializing client...'\n        description=\"Setting up video call connection...\"\n        className='min-h-screen bg-blue-50' >\n            <InlineSpinner size='lg' />\n        </StatusCard>\n    );\n  }\n\n  if (!call) {\n    return (\n        <StatusCard title='Joining call...' className='min-h-screen bg-green-50' >\n            <div className='animate-bounce h-16 w-16 mx-auto'>\n                <div className='w-16 h-16 bg-green-200 rounded-full flex items-center justify-center'>\n                    <Video className='w-8 h-8 text-green-600' />\n                </div>\n            </div>\n            <div className='text-green-600 font-mono text-sm bg-green-100 px-3 py-1 rounded-full inline-block'>\n                Call ID: {id}\n            </div>\n        </StatusCard>\n    );\n  }\n\n  if (error) {\n    return <div className=\"text-red-500\">Error: {error}</div>;\n  }\n\n  return (\n    <StreamVideo client={client}>\n      <StreamTheme className=\"text-white\">\n        <StreamCall call={call}>{children}</StreamCall>\n      </StreamTheme>\n    </StreamVideo>\n  );\n}\n\nexport default Layout;\n","size_bytes":4452},"app/(signed-in)/dashboard/video-call/[id]/page.tsx":{"content":"\"use client\";\n\nimport { InlineSpinner } from \"@/components/LoadingSpinner\";\nimport { StatusCard } from \"@/components/StatusCard\";\nimport { useSidebar } from \"@/components/ui/sidebar\";\nimport {\n  CallControls,\n  CallingState,\n  SpeakerLayout,\n   // ✅ correct import\n  useCallStateHooks,\n} from \"@stream-io/video-react-sdk\";\nimport { Check, Copy } from \"lucide-react\";\nimport { useRouter } from \"next/navigation\"; // ✅ App Router\nimport { useState } from \"react\";\n\nfunction VideoCall() {\n  const { useCallCallingState, useParticipants } = useCallStateHooks();\n  const callingState = useCallCallingState();\n  const participants = useParticipants();\n  const router = useRouter();\n  const [copied, setCopied] = useState(false);\n  const { setOpen } = useSidebar();\n\n  const handleLeave = () => {\n    router.push(\"/dashboard\");\n    setOpen(true);\n  };\n\n  const copyToClipboard = async () => {\n    try {\n      await navigator.clipboard.writeText(window.location.href);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    } catch (error) {\n      console.error(\"Failed to copy:\", error);\n    }\n  };\n\n  if (callingState === CallingState.JOINING) {\n    return (\n      <StatusCard\n        title=\"Joining call...\"\n        description=\"Please wait while we connect you to the call.\"\n        className=\"bg-gray-50 rounded-lg\"\n      >\n        <InlineSpinner size=\"lg\" />\n      </StatusCard>\n    );\n  }\n\n  if (callingState === CallingState.RECONNECTING) {\n    return (\n      <StatusCard\n        title=\"Reconnecting...\"\n        description=\"Connection lost, attempting to reconnect.\"\n        className=\"bg-yellow-50 rounded-lg border border-yellow-200\"\n      >\n        <div className=\"animate-pulse rounded-full h-12 w-12 bg-yellow-400 mx-auto\"></div>\n      </StatusCard>\n    );\n  }\n\n  if (callingState !== CallingState.JOINED) {\n    return (\n      <StatusCard\n        title=\"Loading call...\"\n        description={`Status: ${callingState}`}\n        className=\"bg-gray-50 rounded-lg\"\n      >\n        <div className=\"animate-pulse rounded-full h-12 w-12 bg-gray-400 mx-auto\"></div>\n      </StatusCard>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col\">\n      <div className=\"flex-1 relative\">\n        <SpeakerLayout />\n      </div>\n      <div className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2 z-10\">\n        <CallControls onLeave={handleLeave} />\n      </div>\n\n      {participants.length === 1 && (\n        <div className=\"absolute inset-0 flex items-center justify-center bg-black/50 backdrop-blur-sm\">\n            <div className=\"bg-white rounded-2xl p-8 max-w-lg w-full mx-4 shadow-2xl\">\n                <div className=\"text-center space-y-6\">\n                    <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto\">\n                        <Copy className=\"w-8 h-8 text-blue-600\" />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                        <h2 className=\"text-2xl font-bold text-gray-900\">\n                            Waiting for others to join\n                        </h2>\n                        <p className=\"text-gray-600\">\n                            Share this link with others to invite them to the call\n                        </p>\n                    </div>\n\n                    <div className=\"bg-gray-50 rounded-lg p-4 border border-gray-200\">\n                        <div className=\"flex items-center gap-3\">\n                            <div className=\"flex-1 text-sm text-gray-700 font-mono break-all\">\n                                {window.location.href}\n                            </div>\n                            <button \n                            onClick={copyToClipboard}\n                            className=\" flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 whitespace-nowrap\" >\n                                {copied ? (\n                                    <>\n                                      <Check className=\"w-4 h-4\" />\n                                      Copied!\n                                    </>\n                                ):(\n                                    <>\n                                      <Copy className=\"w-4 h-4\" />\n                                      Copy Link\n                                    </>\n                                )}\n                            </button>\n                        </div>\n                    </div>\n\n                    <p className=\"text-sm text-gray-500\">Others will be able to join using this link</p>\n                </div>\n            </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default VideoCall;\n","size_bytes":4780}},"version":1}